/********************************************************************************
 * Copyright (c) 2018 Calypso Networks Association https://www.calypsonet-asso.org/
 *
 * See the NOTICE file(s) distributed with this work for additional information regarding copyright
 * ownership.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse
 * Public License 2.0 which is available at http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/
package org.eclipse.keyple.calypso.command.po.builder.storedvalue;


import org.eclipse.keyple.calypso.command.PoClass;
import org.eclipse.keyple.calypso.command.po.*;
import org.eclipse.keyple.calypso.command.po.parser.storedvalue.SvDebitRespPars;
import org.eclipse.keyple.core.seproxy.message.ApduResponse;

/**
 * The Class SvGetCmdBuild. This class provides the dedicated constructor to build the SV Get
 * command.
 */
public final class SvDebitCmdBuild extends AbstractPoCommandBuilder<SvDebitRespPars>
        implements PoSendableInSession, PoModificationCommand {

    /** The command. */
    private static final CalypsoPoCommands command = CalypsoPoCommands.SV_GET;

    /**
     * Instantiates a new SvGetCmdBuild.
     *
     * @param poClass indicates which CLA byte should be used for the Apdu
     * @param poRevision the PO revision
     * @param date debit date (not checked by the PO)
     * @param time debit time (not checked by the PO)
     * @param challenge challenge from the debit SAM
     * @param KVC debit key KVC (not checked by the PO)
     * @param samId debit SAM serial number (not checked by the PO)
     * @param samTNum debit SAM transaction number (not checked by the PO)
     * @param signatureHi MSB of the purchase signature generated by the SAM
     * @param extraInfo extra information included in the logs (can be null or empty)
     * @throws IllegalArgumentException - if the command is inconsistent
     */
    public SvDebitCmdBuild(PoClass poClass, PoRevision poRevision, int amount, short date,
            short time, byte[] challenge, byte KVC, byte[] samId, byte[] samTNum,
            byte[] signatureHi, String extraInfo) {
        super(command, null);

        if (amount < 0 || amount > 32768) {
            throw new IllegalArgumentException(
                    "Amount is outside allowed boundaries (0 <= amount <= 32768)");
        }

        if (poRevision == PoRevision.REV3_2 && signatureHi.length != 10) {
            throw new IllegalArgumentException("Bad signture length in rev 3.2 mode.");
        }

        byte cla = poClass.getValue();
        byte p1 = challenge[0];
        byte p2 = challenge[1];

        // handle the dataIn size with signatureHi length (the only varying field)
        byte[] dataIn = new byte[15 + signatureHi.length];

        dataIn[0] = challenge[3];

        // TO BE CONTINUED

        this.request = setApduRequest(cla, command, p1, p2, null, null);
        if (extraInfo != null) {
            this.addSubName(extraInfo);
        }
    }

    @Override
    public SvDebitRespPars createResponseParser(ApduResponse apduResponse) {
        return new SvDebitRespPars(apduResponse);
    }
}
